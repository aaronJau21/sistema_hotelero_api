generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Roles {
  id    Int     @id @default(autoincrement())
  name  String
  Users Users[]
}

model Users {
  id               Int     @id @default(autoincrement())
  nombre           String  @unique @db.VarChar(50)
  apellido_paterno String  @db.VarChar(50)
  apellido_materno String  @db.VarChar(50)
  user_name        String  @unique @db.VarChar(20)
  password         String
  status           Boolean @default(true)

  role_id Int
  Roles   Roles @relation(fields: [role_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  Habitaciones       Habitaciones[]
  Reservas           Reservas[]
  Habitaciones_fotos Habitaciones_fotos[]
  Sucursales_hoteles Sucursales_hoteles[]
}

model Categoria_habitaciones {
  id          Int     @id @default(autoincrement())
  nombre      String  @db.VarChar(50)
  descripcion String? @db.Text
  capacidad   Int
  precioBase  Decimal @default(0.00)

  status     Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  Habitaciones Habitaciones[]
}

model Estado_habitacion {
  id           Int            @id @default(autoincrement())
  nombre       String         @db.VarChar(15)
  Habitaciones Habitaciones[]
}

model Sucursales_hoteles {
  id        Int    @id @default(autoincrement())
  nombre    String
  direccion String

  id_user Int
  Users   Users @relation(fields: [id_user], references: [id])

  status       Boolean        @default(true)
  Habitaciones Habitaciones[]
}

model Habitaciones {
  id Int @id @default(autoincrement())

  numero_habitacion String @db.VarChar(10)

  id_categoria           Int
  Categoria_habitaciones Categoria_habitaciones @relation(fields: [id_categoria], references: [id])

  id_sucursal        Int
  Sucursales_hoteles Sucursales_hoteles @relation(fields: [id_sucursal], references: [id], onDelete: NoAction, onUpdate: NoAction)

  id_estado_habitacion Int               @default(1)
  Estado_habitacion    Estado_habitacion @relation(fields: [id_estado_habitacion], references: [id])

  status  Boolean @default(true)
  id_user Int
  Users   Users   @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction)

  descripcion         String? @db.Text
  servicios_incluidos String? @db.Text

  created_at         DateTime             @default(now())
  updated_at         DateTime             @default(now())
  deleted_at         DateTime?
  Reservas           Reservas[]
  Habitaciones_fotos Habitaciones_fotos[]
}

model Habitaciones_fotos {
  id   Int    @id @default(autoincrement())
  foto String @db.Text

  id_user       Int
  Users         Users        @relation(fields: [id_user], references: [id], onUpdate: NoAction, onDelete: NoAction)
  id_habitacion Int
  Habitaciones  Habitaciones @relation(fields: [id_habitacion], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Clientes {
  id               Int     @id @default(autoincrement())
  nombre           String  @db.VarChar(20)
  apellido_paterno String  @db.VarChar(20)
  apellido_materno String  @db.VarChar(20)
  email            String  @db.VarChar(50)
  password         String
  edad             Int
  status           Boolean @default(true)

  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  deleted_at DateTime?
  Reservas   Reservas[]
}

model Estado_reservas {
  id       Int        @id @default(autoincrement())
  nombre   String     @db.VarChar(15)
  Reservas Reservas[]
}

model Departamentos {
  id           Int            @id @default(autoincrement())
  nombre       String         @unique @db.VarChar(50)
  status       Boolean        @default(true)
  Restaurantes Restaurantes[]
}

model Restaurantes {
  id          Int    @id @default(autoincrement())
  nombre      String @unique @db.VarChar(50)
  direccion   String
  imagen      String @db.Text
  descripcion String @db.Text

  id_departamentos Int
  Departamentos    Departamentos @relation(fields: [id_departamentos], references: [id])
}

model TypeReserva {
  id       Int        @id @default(autoincrement())
  nombre   String     @unique @db.VarChar(20)
  status   Boolean    @default(true)
  Reservas Reservas[]
}

model Reservas {
  id Int @id @default(autoincrement())

  id_client     Int
  Clientes      Clientes     @relation(fields: [id_client], references: [id])
  id_user       Int
  Users         Users        @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction)
  id_habitacion Int
  Habitaciones  Habitaciones @relation(fields: [id_habitacion], references: [id], onDelete: NoAction, onUpdate: NoAction)

  fecha_inicio DateTime
  fecha_fin    DateTime
  costo_total  Decimal

  id_estado_reservas Int             @default(1)
  Estado_reservas    Estado_reservas @relation(fields: [id_estado_reservas], references: [id])

  id_type_reserva Int
  TypeReserva     TypeReserva @relation(fields: [id_type_reserva], references: [id])

  fecha_reserva   DateTime @default(now())
  numero_personas Int
  status          Boolean  @default(true)

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
}
